- name: set variables centos/redhat
  set_fact:
    systemd_dir: /usr/lib/systemd/system
    config_dir: /etc/sysconfig
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: set variables debian/ubuntu
  set_fact:
    systemd_dir: /etc/systemd/system
    config_dir: /etc/default
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: set memory limit for java-iri
  set_fact:
    iri_java_mem: "{{ (ansible_memtotal_mb * 0.8)|int|abs }}m"
  when: memory_autoset is defined and memory_autoset
  tags:
    - mem_override

- name: add user to run iri as
  user:
    name: "{{ iri_username }}"
    shell: /sbin/nologin
    createhome: no
    home: "{{ iri_basedir }}"
  tags:
    - iri_user

- name: remove existing iri basedir
  file:
    path: "{{ iri_basedir }}"
    state: absent
  when: remove_iri_basedir is defined and remove_iri_basedir

# This will tell us whether to re-download iri package
# The directory will not exists if it was removed
# or never created before.
- name: stat iri basedir
  stat:
    path: "{{ iri_basedir }}"
  register: iri_basedir_stat

- name: download and unarchive iri release
  unarchive:
    src: "https://github.com/iotaledger/iri/archive/v{{ iri_version }}.tar.gz"
    dest: /tmp
    remote_src: True
  when: not iri_basedir_stat.stat.exists
  register: iri_downloaded

- name: move temporary extracted iri directory to its basedir
  shell: "mv /tmp/iri-{{ iri_version }} {{ iri_basedir }}"
  when: iri_downloaded and iri_downloaded.changed

- name: ensure iri basedir ownership and permissions
  file:
    path: "{{ iri_basedir }}"
    state: directory
    mode: 0700
    owner: "{{ iri_username }}"
    group: "{{ iri_username }}"

- name: run mvn compile
  shell: "cd {{ iri_basedir }} && mvn clean compile"
  when: iri_downloaded is defined and iri_downloaded.changed

- name: run mvn packages
  shell: "cd {{ iri_basedir }} && mvn package"
  when: iri_downloaded is defined and iri_downloaded.changed

- name: set iri directory's files ownership
  file:
    path: "{{ iri_basedir }}"
    owner: "{{ iri_username }}"
    group: "{{ iri_username }}"
    recurse: yes

- name: copy iri systemd file
  template:
    src: templates/iri.service.j2
    dest: "{{ systemd_dir }}/iri.service"
  notify:
    - reload systemd

- name: copy iri config file
  copy:
    src: files/iri.ini
    dest: "{{ iri_basedir }}/iri.ini"

- name: flush handlers
  meta: flush_handlers

- name: copy iri environment file
  template:
    src: templates/iri.sysconfig.j2
    dest: "{{ config_dir }}/iri"
  notify:
    - restart iri

- name: ensure iri started and enabled
  systemd:
    name: iri.service
    state: started
    enabled: true
