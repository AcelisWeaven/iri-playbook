#!/bin/bash
set -o pipefail

# This is just a proof-of-concept
# Only use if you installed your node using iri-playbook

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   echo "Please change to root: 'sudo su -' and re-run"
   exit 1
fi

clear
CUR_DIR=$(pwd)
WIDTH=78
export NEWT_COLORS='
window=,
'

function pause(){
   read -p "$*"
   clear
}

function cleanup() {
    cd "$CUR_DIR"
    clear
}

trap cleanup INT TERM EXIT

function set_admin_user() {
    USER_CHOICE=$(whiptail --inputbox "Pick a name for the administrator account:" 8 $WIDTH ${ADMIN_USER} --title "Username (allowed regex: a-zA-Z0-9_)" 3>&1 1>&2 2>&3)
    RC=$?
    if [[ $RC -eq 0 ]]; then
        echo -n "${USER_CHOICE}"
    else
        echo -n "${ADMIN_USER}"
    fi
}

function get_admin_user() {
    ADMIN_USER=$(set_admin_user)
    if [[ "$ADMIN_USER" =~ [^a-zA-Z0-9_] ]]; then
        whiptail --title "Invalid Username!" \
                 --msgbox "Username can only contain alphanumeric characters and underscores." \
                 8 $WIDTH
        get_admin_user
    fi
}

function set_admin_password_a() {
    whiptail --passwordbox "please enter your secret password" 8 $WIDTH --title "password dialog" 3>&1 1>&2 2>&3
}

function set_admin_password_b() {
    whiptail --passwordbox "please repeat" 8 $WIDTH --title "password dialog" 3>&1 1>&2 2>&3
}

function get_admin_password() {
    PASSWORD_A=$(set_admin_password_a)
    PASSWORD_B=$(set_admin_password_b)

    if [ "$PASSWORD_A" != "$PASSWORD_B" ]; then
        whiptail --title "Passwords Mismatch!" \
                 --msgbox "Passwords do not match, please try again." \
                 8 $WIDTH
        get_admin_password
    fi

    PASSWD_CHECK=$(echo -n "$PASSWORD_A" | cracklib-check)
    if [[ $(echo "$PASSWD_CHECK" | awk {'print $2'}) != "OK" ]]; then
        whiptail --title "Weak Password!" \
                 --msgbox "Please choose a better password:$(echo ${PASSWD_CHECK}|cut -d: -f2-)" \
                 8 $WIDTH
        get_admin_password
    fi
    ADMIN_PASSWORD="${PASSWORD_A}"
}

### Playbook ###
function verify_playbook() {
    local OUTPUT
    local HEIGHT
    local RC
    if [ ! -d /opt/iri-playbook ]; then
        whiptail --title "Missing Playbook!" \
                 --msgbox "ERROR: Cannot find the iri-playbook in /opt/iri-playbook!" \
                 8 $WIDTH
        return 1
    fi
    cd /opt/iri-playbook
    OUTPUT=$(git pull 2>&1)
    RC=$?
    HEIGHT=$(expr $(echo "$OUTPUT"|wc -l) + 7)
    if [[ $RC -ne 0 ]]; then
        whiptail --title "Git Errors" \
                 --msgbox "Errors when trying to update the playbook repository: $OUTPUT" \
                 8 $WIDTH
    fi
}

### Nelson ###
function enable_nelson() {
    local RC
    if (whiptail --title "Enable Nelson" \
                 --yesno "Are you sure you want to enable Nelson automatic peering?" \
                 8 $WIDTH) then
        verify_playbook
        if [[ $RC -ne 0 ]]; then
             whiptail --title "Error!" \
                      --msgbox "ERROR: Cannot enable Nelson." \
                      8 $WIDTH
             return 1
        fi
        cd /opt/iri-playbook && ansible-playbook -i inventory -v site.yml --tags=nelson_role -e "nelson_enabled=true"
        pause "Installation finished successfully if 'failed=0'. Press any key to return to menu."
    fi
}

function get_latest_nelson_release {
    curl -s -m 5 -f https://api.github.com/repos/SemkoDev/nelson.cli/releases/latest | awk '/tag_name/{print $2}' | tr -d '"v,' | cut -d- -f1
}

function upgrade_nelson() {
    local RC
    NELSON_LATEST=$(get_latest_nelson_release)
    if [[ $? -ne 0 ]]; then
        NELSON_LATEST=unknown
    fi
    NELSON_VERSION=$(nelson --version 2>&1)
    if [[ $? -ne 0 ]]; then
        whiptail --title "Error!" \
                 --msgbox "ERROR: Is Nelson installed?\n$NELSON_VERSION" \
                 10 $WIDTH
        return 1
    fi

    if [ "$NELSON_VERSION" == "$NELSON_LATEST" ]; then
        whiptail --title "No Updates" \
                 --msgbox "You are already running the latest version: $NELSON_VERSION" \
                 8 $WIDTH
        return
    fi

    if (whiptail --title "Upgrade Nelson" \
                 --yesno "Are you sure you want to upgrade Nelson from ${NELSON_VERSION} to ${NELSON_LATEST}?" \
                 8 $WIDTH) then
        verify_playbook
        if [[ $RC -ne 0 ]]; then
             whiptail --title "Error!" \
                      --msgbox "ERROR: Cannot update Nelson." \
                      8 $WIDTH
             return 1
        fi
        cd /opt/iri-playbook && ansible-playbook -i inventory -v site.yml --tags=nelson_role -e "upgrade_nelson=true" -e "nelson_enabled=true"
        pause "Update finished successfully if 'failed=0'. Press any key to return to menu."
    fi    
}

### IRI ###
function get_latest_iri_release {
    curl -s -m 5 -f https://api.github.com/repos/iotaledger/iri/releases/latest  | awk '/tag_name/{print $2}' | tr -d '"v,'
}

function to_digits {
    tr -cd 0-9 <<<"$@"
}

function upgrade_iri() {
    local RC
    echo "Checking for updates..."
    IRI_LATEST=$(get_latest_iri_release)
    if [[ $? -ne 0 ]]; then
        IRI_LATEST=unknown
    fi
    IRI_VERSION=$(grep ^api_version $HOME/.nbctl | cut -d: -f2- | sed 's/ *//g')
    if [[ $? -ne 0 ]]; then
        whiptail --title "Error!" \
                 --msgbox "ERROR: Cannot find $HOME/.nbctl" \
                 8 $WIDTH
        return 1
    fi

    if [ $(to_digits $IRI_VERSION) -eq $(to_digits $IRI_LATEST) ]; then
        whiptail --title "No Updates" \
                 --msgbox "You are already running the latest version: $IRI_VERSION" \
                 8 $WIDTH
        return
    fi

    if (whiptail --title "Upgrade IRI" \
                 --yesno "Are you sure you want to upgrade IRI from ${IRI_VERSION} to ${IRI_LATEST}?\nWARNING: only do this if you know what your are doing!" \
                 8 $WIDTH) then
        verify_playbook
        if [[ $RC -ne 0 ]]; then
             whiptail --title "Error!" \
                      --msgbox "ERROR: Cannot upgrade IRI." \
                      8 $WIDTH
             return 1
        fi
        echo "Downloading new version..."
        IRIVER=${IRI_LATEST}
        wget "https://github.com/iotaledger/iri/releases/download/v${IRIVER}/iri-${IRIVER}.jar" -O "/var/lib/iri/target/iri-${IRIVER}.jar"
        if [[ $? -ne 0 ]]; then
             whiptail --title "Error!" \
                      --msgbox "ERROR: Failed upgrading IRI." \
                      8 $WIDTH
             return 1
        fi
        echo "Update iri configuration files"
        IRI_CONFIG=$(grep ^file /root/.nbctl | cut -d: -f2)
        sed -i "s/^IRI_VERSION=.*$/IRI_VERSION=$IRI_LATEST/" $IRI_CONFIG
        sed -i "s/^api_version.*$/api_version: $IRI_LATEST/" $HOME/.nbctl
        echo "Restart IRI, this can take a few moments..."
        systemctl restart iri
        pause "Update finished successfully, however it is recommended to check the status of IRI. Press any key to return to menu."
    fi
}

### Monitoring ###
function upgrade_monitoring() {
    local RC
    if (whiptail --title "Upgrade Monitoring" \
                 --yesno "Are you sure you want to upgrade monitoring services?" \
                 8 $WIDTH) then
        verify_playbook
        if [[ $RC -ne 0 ]]; then
             whiptail --title "Error!" \
                      --msgbox "ERROR: Cannot upgrade monitoring." \
                      8 $WIDTH
             return 1
        fi

        # Enable ZMQ
        grep -q ^ZMQ_ENABLED /var/lib/iri/iri.ini || echo "ZMQ_ENABLED = true" >>/var/lib/iri/iri.ini && systemctl restart iri    

        # Upgrade iota-prom-exporter and dashboards
        cd /opt/iri-playbook && ansible-playbook -i inventory -v site.yml --tags=iota_prom_exporter,grafana_api -e overwrite=yes -e update_dashboards=true
        pause "Update finished successfully if 'failed=0'. Press any key to return to menu."
    fi
}


### Haproxy ###
function enable_haproxy() {
    local RC
    local DEFAULT_MSG="Are you sure you want to enable wallet access only via HAProxy?\nThis will disable port 14265 externally and make 14267 accessible.\nIn addition, all the REMOTE_LIMIT_API commands will be under control of HAProxy and no longer via IRI configuration files."
    [ -n "$1" ] && { DEFAULT_MSG=$1; }
    if (whiptail --title "HAProxy" \
                 --yesno "$DEFAULT_MSG" \
                 8 $WIDTH) then
        verify_playbook
        if [[ $RC -ne 0 ]]; then
             whiptail --title "Error!" \
                      --msgbox "ERROR: haproxy task failed." \
                      8 $WIDTH
             return 1
        fi

        cd /opt/iri-playbook && ansible-playbook -i inventory -v site.yml --tags=iri_ssl,loadbalancer_role -e lb_bind_address=0.0.0.0 -e overwrite=yes
        pause "Task finished successfully if 'failed=0'. Press any key to return to menu."
    fi
}



### Notice ###
function how_to_setup() {
    whiptail --title "Instructions" \
             --msgbox "Check that you have the .nbctl file in your home folder (ls -l ~/.nbctl).\nExample of the file's contents:\n\napi_version: 1.4.2.1\nhost: http://127.0.0.1:14265\nfile: /etc/default/iri\n\nThis will allow this script to use the nbctl utility to manage neighbors and get the node's data." \
             15 $WIDTH
}


### Neighbors ###
function add_neighbors() {
    local NEIGHBORS=
    local HEIGHT=
    local NBCTL_OUTPUT=
    local RC=
    NEIGHBORS=$(whiptail --inputbox "Enter a list of neighbors separated by space:" 8 $WIDTH --title "Add Neighbors" 3>&1 1>&2 2>&3)
    RC=$?
    if [[ $RC -ne 0 ]]; then
        return
    fi

    ADD_LIST=$(echo "$NEIGHBORS" | sed 's/  */ /g' | sed 's/ / -n /g' | sed 's/^\(.*\)/-n \1/')
    if ! (echo "$ADD_LIST" | egrep -q "tcp|udp"); then
        whiptail --title "Invalid Input" \
                 --msgbox "Invalid input provided. Please check the syntax you provided is valid." \
                  8 $WIDTH
        return
    fi

    HEIGHT=$(expr $(echo "$NEIGHBORS"|wc -l) + 8)
    if (whiptail --title "Add Neighbors" \
                 --yesno "The following neighbor(s) will be added:\n\n $NEIGHBORS" \
                 $HEIGHT $WIDTH) then
        NBCTL_OUTPUT=$(nbctl -a $ADD_LIST 2>&1)
        RC=$?
        if [[ $RC -eq 0 ]]; then
            HEIGHT=$(expr $(echo "$NBCTL_OUTPUT"|wc -l) + 7)
            whiptail --title "Added Neighbors" \
                     --msgbox "$NBCTL_OUTPUT" \
                    $HEIGHT $WIDTH
        else
            HEIGHT=$(expr $(echo "$NBCTL_OUTPUT"|wc -l) + 10)
            whiptail --title "Adding Neighbors Failed" \
                     --msgbox "Failure: $NBCTL_OUTPUT" \
                     $HEIGHT $WIDTH
        fi
    fi
}

function remove_neighbors() {
    local NEIGHBORS_ARRAY
    local NEIGHBORS
    local NEIGHBOR
    local HEIGHT
    NEIGHBORS=$(list_neighbors get)
    RC=$?
    if [[ $RC -ne 0 ]]; then
        whiptail --title "Neighbors Failed" \
                 --msgbox "Failed to get list of neighbors" \
                 8 $WIDTH
        return
    fi
    if [ "$NEIGHBORS" == "" ]; then
        whiptail --title "No Neighbors" \
                 --msgbox "There are no neighbors configured" \
                 8 $WIDTH
        return
    fi
    HEIGHT=$(expr $(echo "$NEIGHBORS"|wc -l) + 5)
    read -ra NEIGHBORS_ARRAY <<<$(echo "$NEIGHBORS")
    read -ra NEIGHBORS_ARRAY_INDEXED <<<$(echo "$NEIGHBORS"| awk '!/^ / && NF { print NR")"; print $1}')
    NEIGHBOR_INDEX=$(whiptail --title "Remove neighbors" --menu "Choose a neighbor" 25 $WIDTH 16  "${NEIGHBORS_ARRAY_INDEXED[@]}" 3>&1 1>&2 2>&3)
    if [ $? -eq 1 ]; then
        return
    fi

    NEIGHBOR_INX=$(echo "$NEIGHBOR_INDEX" | cut -d')' -f1)
    NEIGHBOR_INX=$(expr $NEIGHBOR_INX - 1)
    TO_REMOVE="${NEIGHBORS_ARRAY[$NEIGHBOR_INX]}"
    SCHEME=$(echo "$TO_REMOVE"|cut -d'/' -f2)
    ADDRESS=$(echo "$TO_REMOVE"|cut -d'/' -f1)
    if (whiptail --title "Confirm removal" \
                 --yesno "Are you sure you want to remove: ${SCHEME}://${ADDRESS}" \
                 8 $WIDTH)
    then
        REMOVAL_OUTPUT=$(nbctl -r -n "${SCHEME}://${ADDRESS}" 2>&1)
        if [ $? -eq 0 ];then
            whiptail --title "Removed successfully" \
                     --msgbox "$REMOVAL_OUTPUT" \
                     12 $WIDTH
        else
            HEIGHT=$(expr $(echo "$REMOVAL_OUTPUT"|wc -l) + 7)
            whiptail --title "Remove failed!" \
                     --msgbox "${REMOVAL_OUTPUT}" \
                     $HEIGHT $WIDTH
        fi
    fi
}

function list_neighbors() {
    local NEIGHBORS_QUERY
    local NEIGHBORS
    local HEIGHT
    NEIGHBORS_QUERY=$(nbctl -l 2>&1)
    if [ $? -ne 0 ]; then
        HEIGHT=$(expr $(echo "$NEIGHBORS_QUERY"|wc -l) + 7)
        whiptail --title "List neighbors failed" \
                 --msgbox "$NEIGHBORS_QUERY" \
                 $HEIGHT $WIDTH
        return 1
    else
        NEIGHBORS=$( echo "$NEIGHBORS_QUERY" | jq -r '.neighbors[] | "\(.address)/\(.connectionType)"' )
        if [ -n "$1" ]; then
            echo "$NEIGHBORS"
            return 0
        fi

        if [ "$NEIGHBORS" == "" ]; then
            LENGTH=0
        else
            LENGTH=$(echo "$NEIGHBORS"|wc -l)
        fi
        local HEIGHT=$(expr $LENGTH + 8)
        whiptail --title "List Neighbors" \
                 --msgbox "Total: ${LENGTH} neighbor(s)\n\n${NEIGHBORS}" \
                 $HEIGHT $WIDTH
    fi
}

### Get DB ###
function get_db() {
    XVPS_SOURCE="https://x-vps.com/iota.db.tgz"
    DB_SOURCE=$(whiptail --inputbox "This action will download and boostrap a fully synced database.\nChoose a source where to download the database from:" 8 $WIDTH  $XVPS_SOURCE --title "Download Database" 3>&1 1>&2 2>&3)

    if [ "$DB_SOURCE" == "$XVPS_SOURCE" ]; then
        LAST_UPDATED=$(curl -m 4 -f -s https://x-vps.com/index.php | sed 's/^.*\(iota.db.tgz was last updated at: .*\)\..*$/\1/' 2>/dev/null)
    fi
    if (whiptail --title "Confirm DB" \
                 --yesno "Download new database from '$DB_SOURCE'?\n\n${LAST_UPDATED}" \
                 12 $WIDTH) then
        cd /tmp && wget -O iota.db.tgz "$DB_SOURCE" && systemctl stop iri && rm -rf /var/lib/iri/target/mainnetdb* && mkdir /var/lib/iri/target/mainnetdb/ && pv iota.db.tgz | tar xzf - -C /var/lib/iri/target/mainnetdb/ && chown iri.iri /var/lib/iri -R && rm -f /tmp/iota.db.tgz && systemctl start iri
        if [[ $? -ne 0 ]]; then
            whiptail --title "New DB Failed!" \
                     --msgbox "Well this is embarrassing. Downloading the new DB failed..." \
                     8 $WIDTH
            rm -f /tmp/iota.db.tgz
            return 1
        fi
    fi
}

### Node info ###
function show_lsmi() {
    if [ ! -f $HOME/.nbctl ]; then
        whiptail --title "Missing .nbctl" \
                 --msgbox "Error: cannot find $HOME/.nbctl" \
                 8 $WIDTH
        return
    fi
    IRI_HOST=$(grep ^host $HOME/.nbctl | cut -d: -f2-)
    IRI_API_VERSION=$(grep ^api_version $HOME/.nbctl | cut -d: -f2-)
    LSMI_LOCAL=$(curl -f -m 5 -s $IRI_HOST -X POST -H "X-IOTA-API-Version: $IRI_API_VERSION" -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}'| python -m json.tool|egrep "latestSolidSubtangleMilestoneIndex|latestMilestoneIndex"| sed 's/,//'|sed -e 's/^[ \t]*//'|sed 's/"//g')
    if [ $? -ne 0 ]; then
        whiptail --title "Query failed" \
                 --msgbox "Error: failed query $LSMI_LOCAL" \
                 12 $WIDTH
        return
    fi

    LSMI_QUERY=$(curl -s -f -m 5 https://x-vps.com/lsmi|jq -r .latestMilestoneIndex 2>/dev/null)
    if [ $? -eq 0 ]; then
        OUTPUT="Latest milestone index: ${LSMI_QUERY}\n\n"
    else
        OUTPUT=""
    fi
    OUTPUT="${OUTPUT}Local:\n\n${LSMI_LOCAL}"
    whiptail --title "LatestMilestoneIndex" \
             --msgbox "$OUTPUT" \
             12 $WIDTH
}

function get_node_info() {
    if [ ! -f $HOME/.nbctl ]; then
        whiptail --title "Missing .nbctl" \
                 --msgbox "Error: cannot find $HOME/.nbctl" \
                 8 $WIDTH
        return
    fi
    IRI_HOST=$(grep ^host $HOME/.nbctl | cut -d: -f2-)
    IRI_API_VERSION=$(grep ^api_version $HOME/.nbctl | cut -d: -f2-)
    NODE_INFO=$(curl -f -m 5 -s $IRI_HOST -X POST -H "X-IOTA-API-Version: $IRI_API_VERSION" -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}'| jq -r 'to_entries[] | "\(.key): \(.value )"' | column -t | sort)
    if [ $? -ne 0 ]; then
        whiptail --title "Query failed" \
                 --msgbox "Error: failed query $NODE_INFO" \
                 12 $WIDTH
        return
    fi

    HEIGHT=$(expr $(echo "$NODE_INFO"|wc -l) + 7)
    whiptail --title "Node Info" \
             --msgbox "$NODE_INFO" \
             $HEIGHT $WIDTH
}

### Services ###
function service_status() {
    local SERVICE
    SERVICE=$1
    # Pipe to less as some distros don't use pager
    systemctl status $SERVICE|less
}

function service_cmd() {
    local SERVICE
    local COMMAND
    local OUTPUT
    SERVICE=$1
    COMMAND=$2
    echo "Running 'systemctl $COMMAND $SERVICE' ..."
    OUTPUT=$(systemctl $COMMAND $SERVICE 2>&1)
    HEIGHT=$(expr $(echo "$OUTPUT"|wc -l) + 7)
    if [ $? -ne 0 ]; then
        whiptail --title "Failed" \
                 --msgbox "$COMMAND $SERVICE failed: $OUTPUT" \
                 $HEIGHT $WIDTH
    else
        whiptail --title "Success" \
                 --msgbox "$COMMAND $SERVICE OK" \
                 $HEIGHT $WIDTH
    fi
}

function service_log() {
    local SERVICE
    local ARGS
    SERVICE=$1
    # Pipe to less in the case too few lines.
    # This will prevent immediately exiting the view
    journalctl -u $SERVICE|less
}

function service_menu() {
    local SERVICE
    SERVICE=$1
    whiptail --title "$SERVICE Service" \
             --menu "Choose an option. For logs use SHIFT-g to skip to end of log, or q to exit." \
             --cancel-button "Back" \
             25 $WIDTH 16 \
    "a)" "Status" \
    "b)" "Start" \
    "c)" "Stop" \
    "d)" "Restart" \
    "e)" "View log" \
    3>&1 1>&2 2>&3
}

function service() {
    local SERVICE
    local CHOICE
    SERVICE=$1
    CHOICE=$(service_menu $SERVICE)
    RC=$?
    if [[ $RC -eq 1 ]]; then
        return
    fi
    case "$CHOICE" in

        "a)")
            service_status $SERVICE
            service $SERVICE
            ;;

        "b)")
            service_cmd $SERVICE start
            service $SERVICE
            ;;

        "c)")
            service_cmd $SERVICE stop
            service $SERVICE
            ;;

        "d)")
            service_cmd $SERVICE restart
            service $SERVICE
            ;;

        "e)")
            service_log $SERVICE
            service $SERVICE
            ;;

        *)
            service $SERVICE
            ;;
    esac
}

function services_menu() {
    whiptail --title "Node Services" \
             --menu "Choose an option" \
             --cancel-button "Back" \
             25 $WIDTH 16 \
    "a)" "IRI" \
    "b)" "IOTA Peer Manager" \
    "c)" "Prometheus" \
    "d)" "Alert Manager" \
    "e)" "Grafana" \
    "f)" "IOTA Prometheus Exporter" \
    "g)" "Nginx" \
    "h)" "HAProxy" \
    "i)" "Nelson" \
    3>&1 1>&2 2>&3
}

function services() {
    local CHOICE
    CHOICE=$(services_menu)
    RC=$?
    if [[ $RC -eq 1 ]]; then
        return
    fi
    case "$CHOICE" in

        "a)")
            service iri
            services
            ;;

        "b)")
            service iota-pm
            services
            ;;

        "c)")
            service prometheus
            services
            ;;

        "d)")
            service alertmanager
            services
            ;;

        "e)")
            service grafana-server
            services
            ;;

        "f)")
            service iota-prom-exporter
            services
            ;;

        "g)")
            service nginx
            services
            ;;

        "h)")
            service haproxy
            services
            ;;

        "i)")
           service nelson
           services
           ;;

        *)
            services
            ;;
    esac
}

function main_menu() {
    whiptail --title "IRI Fullnode Menu" \
             --menu "Choose an option" \
             --cancel-button "Exit" \
              25 $WIDTH 16 \
    "a)" "Enable Nelson" \
    "b)" "Update Nelson" \
    "c)" "Update IRI software" \
    "d)" "Update Monitoring" \
    "e)" "Enable HAProxy" \
    "f)" "Update HAProxy" \
    "g)" "Add Neighbors" \
    "h)" "Remove neighbors" \
    "i)" "List neighbors" \
    "j)" "Show LatestMilestoneIndex" \
    "k)" "Get node info" \
    "l)" "Manage services" \
    "m)" "Get Fully Synced DB" \
    "Z)" "Configure this script" \
    3>&1 1>&2 2>&3
}

function run_installer_menus() {
    local CHOICE
    CHOICE=$(main_menu)
    RC=$?
    if [[ $RC -eq 1 ]]; then
        exit
    fi

    case "$CHOICE" in

        "Z)")
            how_to_setup
            run_installer_menus
            ;;

        "a)")
            enable_nelson
            run_installer_menus
            ;;

        "b)")
            upgrade_nelson
            run_installer_menus
            ;;

        "c)")
            upgrade_iri
            run_installer_menus
            ;;

        "d)")
            upgrade_monitoring
            run_installer_menus
            ;;

        "e)")
            enable_haproxy
            run_installer_menus
            ;;

        "f)")
            enable_haproxy "This will update the haproxy.cfg file to the latest version. Continue?"
            run_installer_menus
            ;;

        "g)")
            add_neighbors
            run_installer_menus
            ;;

        "h)")
            remove_neighbors
            run_installer_menus
            ;;

        "i)")
            list_neighbors
            run_installer_menus
            ;;

        "j)")
            show_lsmi
            run_installer_menus
            ;;

        "k)")
            get_node_info
            run_installer_menus
            ;;

        "l)")
            services
            run_installer_menus
            ;;

        "m)")
            get_db
            run_installer_menus
            ;;

        *)
            run_installer_menus
            ;;
    esac
}

run_installer_menus
