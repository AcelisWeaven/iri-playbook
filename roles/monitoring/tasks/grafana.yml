- name: copy grafana new config file
  template:
    src: templates/grafana.ini.j2
    dest: /etc/grafana/grafana.ini
    backup: yes
  notify:
    - restart grafana

- name: start and enable grafana service
  systemd:
    name: grafana-server
    state: started
    enabled: yes

- name: copy validation script
  copy:
    src: ../shared-files/validate_nginx_config.sh
    dest: /usr/local/bin/validate_nginx_config.sh
    mode: 0755
  when: install_nginx is defined and install_nginx

- name: copy grafana nginx config
  template:
    src: templates/grafana.conf.j2
    dest: /etc/nginx/conf.d/grafana.conf
    validate: "/usr/local/bin/validate_nginx_config.sh -t %s -d conf.d/grafana.conf -r"
  when: install_nginx is defined and install_nginx
  notify:
    - reload nginx

- name: flush handlers
  meta: flush_handlers

- name: Wait max 90 seconds for grafana port to become available
  wait_for:
    timeout: 90
    port: "{{ grafana_port }}"

- name: create prometheus datasource in grafana
  uri:
    url: "http://localhost:{{ grafana_port }}/api/datasources"
    method: POST
    user: "{{ iotapm_nginx_user }}"
    password: "{{ iotapm_nginx_password }}"
    body: '{"name":"Prometheus","type":"prometheus","url":"http://localhost:{{ prom_port }}","access":"proxy","isDefault":true}'
    force_basic_auth: yes
    status_code: 200,409
    body_format: json
  register: datasource
  changed_when: datasource.status == 200
  tags:
    - grafana_api

- name: remove existing dashboards for update
  block:

    - name: deleting dashboards
      uri:
        url: "http://localhost:{{ grafana_port }}/api/dashboards/db/{{ item }}"
        method: DELETE
        user: "{{ iotapm_nginx_user }}"
        password: "{{ iotapm_nginx_password }}"
        force_basic_auth: yes
        status_code: 200,404
        body_format: json
      register: dashboard
      changed_when: dashboard.status == 200
      with_items:
        - "iota"
        - "node-exporter-single-server"
        - "prometheus-system"

  when: update_dashboards is defined and update_dashboards
  tags:
    - grafana_api

- name: create node exporter dashboard in grafana
  uri:
    url: "http://localhost:{{ grafana_port }}/api/dashboards/db"
    method: POST
    user: "{{ iotapm_nginx_user }}"
    password: "{{ iotapm_nginx_password }}"
    body: "{{ lookup('file','files/node_exporter_dashboard.json') }}"
    force_basic_auth: yes
    status_code: 200,412
    body_format: json
  register: dashboard
  changed_when: dashboard.status == 200
  tags:
    - grafana_api

- name: handle iota exporter dashboard
  block:

    - name: slurp iota dashboard json
      set_fact:
        parent_dict: {'dashboard': {}}
        tmpdata: "{{ lookup('file','files/iota_exporter_dashboard.json')|from_json }}"

    - name: combine dashboard object to parent dict
      set_fact:
        iota_exporter_object: "{{ parent_dict | combine({'dashboard': tmpdata}) }}"

    - name: create iota exporter dashboard in grafana
      uri:
        url: "http://localhost:{{ grafana_port }}/api/dashboards/db"
        method: POST
        user: "{{ iotapm_nginx_user }}"
        password: "{{ iotapm_nginx_password }}"
        body: "{{ iota_exporter_object | to_json }}"
        force_basic_auth: yes
        status_code: 200,412
        body_format: json
      register: dashboard
      changed_when: dashboard.status == 200

  tags:
    - grafana_api

- name: create prometheus system dashboard in grafana
  uri:
    url: "http://localhost:{{ grafana_port }}/api/dashboards/db"
    method: POST
    user: "{{ iotapm_nginx_user }}"
    password: "{{ iotapm_nginx_password }}"
    body: "{{ lookup('file','files/prometheus_dashboard.json') }}"
    force_basic_auth: yes
    status_code: 200,412
    body_format: json
  register: dashboard
  changed_when: dashboard.status == 200
  tags:
    - grafana_api
