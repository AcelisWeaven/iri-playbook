- name: set variables centos/redhat
  set_fact:
    nodejs_bin: /usr/bin/node
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: set variables debian/ubuntu
  set_fact:
    nodejs_bin: /usr/bin/nodejs
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: add user to run prometheus as
  user:
    name: "{{ prom_username }}"
    shell: /sbin/nologin
    createhome: no
    home: "{{ prom_basedir }}"
  tags:
    - prom_user

- name: remove existing prometheus basedir
  file:
    path: "{{ prom_basedir }}"
    state: absent
  when: remove_prom_basedir is defined and remove_prom_basedir

# Re-download prometheus?
- name: stat prometheus basedir
  stat:
    path: "{{ prom_basedir }}"
  register: prom_basedir_stat

- name: download and unarchive prometheus release
  unarchive:
    src: "https://github.com/prometheus/prometheus/releases/download/v{{ prom_version }}/prometheus-{{ prom_version }}.linux-amd64.tar.gz"
    dest: /tmp
    remote_src: True
  when: not prom_basedir_stat.stat.exists
  register: prom_downloaded

- name: move temporary extracted prometheus directory to its basedir
  shell: "mv /tmp/prometheus-{{ prom_version }}.linux-amd64 {{ prom_basedir }}"
  when: prom_downloaded and prom_downloaded.changed

- name: ensure prometheurs basedir ownership and permissions
  file:
    path: "{{ prom_basedir }}"
    state: directory
    mode: 0700
    owner: "{{ prom_username }}"
    group: "{{ prom_username }}"

# Re-download node_exporter?
- name: stat node exporter basedir
  stat:
    path: "{{ exporter_basedir }}"
  register: exporter_basedir_stat

- name: download and unarchive node_exporter release
  unarchive:
    src: "https://github.com/prometheus/node_exporter/releases/download/v{{ exporter_version }}/node_exporter-{{ exporter_version }}.linux-amd64.tar.gz"
    dest: /tmp
    remote_src: True
  when: not exporter_basedir_stat.stat.exists
  register: exporter_downloaded

- name: move temporary extracted node exporter directory to its basedir
  shell: "mv /tmp/node_exporter-{{ exporter_version }}.linux-amd64 {{ exporter_basedir }}"
  when: exporter_downloaded and exporter_downloaded.changed

- name: ensure exporter basedir ownership and permissions
  file:
    path: "{{ exporter_basedir }}"
    state: directory
    mode: 0700
    owner: "{{ prom_username }}"
    group: "{{ prom_username }}"

- name: Add an Apt signing key for grafana repo
  apt_key:
    url: https://packagecloud.io/gpg.key
    state: present
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: add grafana apt repository
  apt_repository:
    repo: deb https://packagecloud.io/grafana/stable/debian/ jessie main
    state: present 
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install grafana
  apt:
    state: latest
    name: grafana
    update_cache: yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  notify:
    - reload systemd

- name: add grafana repository
  yum_repository:
    name: grafana
    description: grafana
    baseurl: https://packagecloud.io/grafana/stable/el/6/$basearch
    gpgcheck: yes
    enabled: yes
    sslcacert: /etc/pki/tls/certs/ca-bundle.crt
    repo_gpgcheck: yes
    gpgkey: 'https://packagecloud.io/gpg.key https://grafanarel.s3.amazonaws.com/RPM-GPG-KEY-grafana'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Install grafana
  yum:
    name: grafana
    state: latest
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: flush handlers
  meta: flush_handlers

